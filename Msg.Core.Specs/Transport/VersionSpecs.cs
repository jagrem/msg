using NUnit.Framework;
using FluentAssertions;
using System;
using Version = Msg.Core.Versioning.Version;

namespace Msg.Core.Specs.Transport
{
	[TestFixture]
	public class VersionSpecs
	{
		static readonly Func<byte[],Version> convertByteArray = b => b;

		[Test]
		public void Given_any_version_When_converting_to_a_byte_array_Then_AMQP_followed_by_zero_are_the_first_five_bytes ()
		{
			//-----------------------------------------------------------------------------------------------------------
			// Arrange
			//-----------------------------------------------------------------------------------------------------------
			var subject = new Version (1, 2, 3);

			//-----------------------------------------------------------------------------------------------------------
			// Act
			//-----------------------------------------------------------------------------------------------------------
			byte[] result = subject;

			//-----------------------------------------------------------------------------------------------------------
			// Assert
			//-----------------------------------------------------------------------------------------------------------
			result.Should ().ContainInOrder ((byte)'A', (byte)'M', (byte)'Q', (byte)'P', (byte)0);
		}

		[Test]
		public void Given_a_version_When_converting_to_a_byte_array_Then_the_sixth_byte_equals_the_major_version_number ()
		{
			//-----------------------------------------------------------------------------------------------------------
			// Arrange
			//-----------------------------------------------------------------------------------------------------------
			var subject = new Version (1, 2, 3);

			//-----------------------------------------------------------------------------------------------------------
			// Act
			//-----------------------------------------------------------------------------------------------------------
			byte[] result = subject;

			//-----------------------------------------------------------------------------------------------------------
			// Assert
			//-----------------------------------------------------------------------------------------------------------
			result.Should ().HaveElementAt (5, (byte)1);
		}

		[Test]
		public void Given_a_version_When_converting_to_a_byte_array_Then_the_seventh_byte_equals_the_minor_version_number ()
		{
			//-----------------------------------------------------------------------------------------------------------
			// Arrange
			//-----------------------------------------------------------------------------------------------------------
			var subject = new Version (1, 2, 3);

			//-----------------------------------------------------------------------------------------------------------
			// Act
			//-----------------------------------------------------------------------------------------------------------
			byte[] result = subject;

			//-----------------------------------------------------------------------------------------------------------
			// Assert
			//-----------------------------------------------------------------------------------------------------------
			result.Should ().HaveElementAt (6, (byte)2);
		}

		[Test]
		public void Given_a_version_When_converting_to_a_byte_array_Then_the_eight_byte_equals_the_revision_number ()
		{
			//-----------------------------------------------------------------------------------------------------------
			// Arrange
			//-----------------------------------------------------------------------------------------------------------
			var subject = new Version (1, 2, 3);

			//-----------------------------------------------------------------------------------------------------------
			// Act
			//-----------------------------------------------------------------------------------------------------------
			byte[] result = subject;

			//-----------------------------------------------------------------------------------------------------------
			// Assert
			//-----------------------------------------------------------------------------------------------------------
			result.Should ().HaveElementAt (7, (byte)3);
		}

		[Test]
		public void Given_a_byte_array_When_converting_to_a_version_Then_the_version_number_is_correct ()
		{
			//-----------------------------------------------------------------------------------------------------------
			// Arrange
			//-----------------------------------------------------------------------------------------------------------
			var subject = new byte[] { (byte)'A', (byte)'M', (byte)'Q', (byte)'P', (byte)0, (byte)1, (byte)2, (byte)3 };

			//-----------------------------------------------------------------------------------------------------------
			// Act
			//-----------------------------------------------------------------------------------------------------------
			Version result = subject;

			//-----------------------------------------------------------------------------------------------------------
			// Assert
			//-----------------------------------------------------------------------------------------------------------
			result.Major.Should ().Be (1);
			result.Minor.Should ().Be (2);
			result.Revision.Should ().Be (3);
		}

		[Test]
		public void Given_an_empty_byte_array_When_converting_to_a_version_Then_an_exception_is_thrown ()
		{
			//-----------------------------------------------------------------------------------------------------------
			// Arrange
			//-----------------------------------------------------------------------------------------------------------
			var subject = new byte[0];

			//-----------------------------------------------------------------------------------------------------------
			// Act
			//-----------------------------------------------------------------------------------------------------------
			Action result = () => convertByteArray (subject);

			//-----------------------------------------------------------------------------------------------------------
			// Assert
			//-----------------------------------------------------------------------------------------------------------
			result.ShouldThrow<ArgumentException> ();
		}

		[Test]
		public void Given_a_byte_array_that_is_too_short_When_converting_to_a_version_Then_an_exception_is_thrown ()
		{
			//-----------------------------------------------------------------------------------------------------------
			// Arrange
			//-----------------------------------------------------------------------------------------------------------
			var subject = new byte[] { (byte)'A', (byte)'M', (byte)'Q', (byte)'P', (byte)0, (byte)1, (byte)2 };

			//-----------------------------------------------------------------------------------------------------------
			// Act
			//-----------------------------------------------------------------------------------------------------------
			Action result = () => convertByteArray (subject);

			//-----------------------------------------------------------------------------------------------------------
			// Assert
			//-----------------------------------------------------------------------------------------------------------
			result.ShouldThrow<ArgumentException> ();
		}

		[Test]
		public void Given_a_byte_array_that_is_too_long_When_converting_to_a_version_Then_an_exception_is_thrown ()
		{
			//-----------------------------------------------------------------------------------------------------------
			// Arrange
			//-----------------------------------------------------------------------------------------------------------
			var subject = new byte[] { (byte)'A', (byte)'M', (byte)'Q', (byte)'P', (byte)0, (byte)1, (byte)2, (byte)3, (byte)4 };

			//-----------------------------------------------------------------------------------------------------------
			// Act
			//-----------------------------------------------------------------------------------------------------------
			Action result = () => convertByteArray (subject);

			//-----------------------------------------------------------------------------------------------------------
			// Assert
			//-----------------------------------------------------------------------------------------------------------
			result.ShouldThrow<ArgumentException> ();
		}

		[Test]
		public void Given_a_byte_array_with_an_fifth_byte_greater_than_zero_When_converting_to_a_version_Then_an_exception_is_thrown ()
		{
			//-----------------------------------------------------------------------------------------------------------
			// Arrange
			//-----------------------------------------------------------------------------------------------------------
			var subject = new byte[] { (byte)'A', (byte)'M', (byte)'Q', (byte)'P', (byte)7, (byte)1, (byte)2, (byte)3 };

			//-----------------------------------------------------------------------------------------------------------
			// Act
			//-----------------------------------------------------------------------------------------------------------
			Action result = () => convertByteArray (subject);

			//-----------------------------------------------------------------------------------------------------------
			// Assert
			//-----------------------------------------------------------------------------------------------------------
			result.ShouldThrow<ArgumentException> ();
		}

		[Test]
		public void Given_a_byte_array_that_doesnt_start_with_AMQP_When_converting_to_a_version_Then_an_exception_is_thrown ()
		{
			//-----------------------------------------------------------------------------------------------------------
			// Arrange
			//-----------------------------------------------------------------------------------------------------------
			var subject = new byte[] { (byte)'Z', (byte)'S', (byte)'X', (byte)'F', (byte)7, (byte)1, (byte)2, (byte)3 };

			//-----------------------------------------------------------------------------------------------------------
			// Act
			//-----------------------------------------------------------------------------------------------------------
			Action result = () => convertByteArray (subject);

			//-----------------------------------------------------------------------------------------------------------
			// Assert
			//-----------------------------------------------------------------------------------------------------------
			result.ShouldThrow<ArgumentException> ();
		}

		[Test]
		public void Given_a_byte_array_where_AMQP_is_not_all_uppercase_When_converting_to_a_version_Then_an_exception_is_thrown ()
		{
			//-----------------------------------------------------------------------------------------------------------
			// Arrange
			//-----------------------------------------------------------------------------------------------------------
			var subject = new byte[] { (byte)'a', (byte)'M', (byte)'q', (byte)'P', (byte)7, (byte)1, (byte)2, (byte)3 };

			//-----------------------------------------------------------------------------------------------------------
			// Act
			//-----------------------------------------------------------------------------------------------------------
			Action result = () => convertByteArray (subject);

			//-----------------------------------------------------------------------------------------------------------
			// Assert
			//-----------------------------------------------------------------------------------------------------------
			result.ShouldThrow<ArgumentException> ();
		}

		[Test]
		[TestCase (1, 0, 0, 0, 9, 11)]
		[TestCase (0, 9, 1, 0, 8, 5)]
		[TestCase (0, 1, 2, 0, 1, 1)]
		public void Given_two_versions_When_comparing_them_Then_the_left_version_is_greater_than_the_right (byte leftMajor, byte leftMinor, byte leftRevision, byte rightMajor, byte rightMinor, byte rightRevision)
		{
			//-----------------------------------------------------------------------------------------------------------
			// Arrange
			//-----------------------------------------------------------------------------------------------------------
			var left = new Version (leftMajor, leftMinor, leftRevision);
			var right = new Version (rightMajor, rightMinor, rightRevision);

			//-----------------------------------------------------------------------------------------------------------
			// Act
			//-----------------------------------------------------------------------------------------------------------
			var result = left > right;

			//-----------------------------------------------------------------------------------------------------------
			// Assert
			//-----------------------------------------------------------------------------------------------------------
			result.Should ().BeTrue ();
		}

		[Test]
		[TestCase (1, 0, 0, 0, 9, 11)]
		[TestCase (0, 9, 1, 0, 8, 5)]
		[TestCase (0, 1, 2, 0, 1, 1)]
		public void Given_two_versions_When_comparing_them_Then_the_right_version_is_less_than_the_right (byte leftMajor, byte leftMinor, byte leftRevision, byte rightMajor, byte rightMinor, byte rightRevision)
		{
			//-----------------------------------------------------------------------------------------------------------
			// Arrange
			//-----------------------------------------------------------------------------------------------------------
			var left = new Version (leftMajor, leftMinor, leftRevision);
			var right = new Version (rightMajor, rightMinor, rightRevision);

			//-----------------------------------------------------------------------------------------------------------
			// Act
			//-----------------------------------------------------------------------------------------------------------
			var result = right < left;

			//-----------------------------------------------------------------------------------------------------------
			// Assert
			//-----------------------------------------------------------------------------------------------------------
			result.Should ().BeTrue ();
		}

		[Test]
		[TestCase (1, 0, 0)]
		[TestCase (0, 9, 1)]
		[TestCase (0, 1, 2)]
		public void Given_two_versions_When_comparing_them_Then_they_have_value_equality (byte major, byte minor, byte revision)
		{
			//-----------------------------------------------------------------------------------------------------------
			// Arrange
			//-----------------------------------------------------------------------------------------------------------
			var left = new Version (major, minor, revision);
			var right = new Version (major, minor, revision);

			//-----------------------------------------------------------------------------------------------------------
			// Act
			//-----------------------------------------------------------------------------------------------------------
			var result = right == left;

			//-----------------------------------------------------------------------------------------------------------
			// Assert
			//-----------------------------------------------------------------------------------------------------------
			result.Should ().BeTrue ();
		}
	}
}

